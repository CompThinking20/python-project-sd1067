Project Overview:
This is a text-based, turnbased, rougelike game. I feel as if I met every goal that I wrote down in my original proposal. 
Each room is randomized, players get stronger through level-ups and randomized skills from drops, all progress lost on death.
All of these things were outlined in my propoosal and all were met in some capacity here.  

Project Narative:
The first thing that I made was the class Character, found in source.py. The constuctor consists of all of the main stats that it would need and a name. Then I decided to implement a display function, in case I needed to show all of the attributes of the character. This class needed to represent both enemies and players so I kept that in mind when writing. The next thing I satrted to write was the encounter fuction, which made combat happen between two characters. It takes two characters as parameters and has them act until one has thier hp reduced to zero. Actions are chosen from a list for the player and enemy skills are chosen at random. I made extensive use of the random library as a consequence of the project I was going for. I used a loop be able to determined turn order. There were two numbers being counted down at intervals equal to the character's agl stat, and the first one to reach zero is allowed to move. I ran into some difficulty taking input, but I made use of try catch blocks to make sure the inputs worked. The next thing that I worked on were the skills to use. The skills are thier own class found in source.py as well. Skills have a name, damage multiplier, effect, and damage type in thier constructors. The class contains a display function, like the chracter class, as well as an apply function, so the skills could be used. In this process of making skills work, I had to add a b_action function for use in encounter, though it may seem redundant now. I then Implemented a Level-up function into the character class, as well a growth parameter. The higher the growth parameter, the stronger a level-up would be was the intended design. The character class, and skill class, along with the enounter function in it's own file, were all submitted as part of Milestone 1, along with a file called test.py I used to make sure everything worked.

For milestone two, I worked on the randomization for the game and pulled it all together. I created a file called tag.py, and stored dictionaries of things to pull upon randomly during the game. Next I created rooms.py, which contained the room class. The constuctor only had two parameters, a string "type" and an int "diff". The room class also had a display function just like the character and skill class. It also has an enter function, which varied the outcome depending on what the type of room was. Next to do was the randomization. First, I created the generate_enemy function, which made an enemy from a random grabbag of tags from the tag.py file. I also made the generate skill function alongside it, to also make skills by pulling from a random assortment of tags in tags.py. So in the end, whne a room is made, if it is a combat type room, a randomized enemy is made, with randomized skills and scaled according to the int "diff". Lastly I made the game loop, in game.py. While the variable gstatus is true, the game runs and if it ever becomes false in the event of a game over, the program exits. The game first asks for a players name and initial choice of growth rates before starting the game proper. The game then sets the floor to 1 and starts another loop. Every 10 floors is a boss floor, a floor with a harder randomly generated enemy. All others are a choice between a regular combat encounter and another randomly generated room. After every combat encounter the player levels up and gains a skill if they win. The exception handling and input were very useful in this project.

Corrections:
I didn't have many corrections for Milestones 1 and 2, but somethings that I might change if I had time would be to move some functions and classes around. Generate_enemy, generate_skill, and the room class should probably be in source.py or combat.py. In Milestone 1, I was told to add more comments so I made sure to add them where things might have seemed unclear. 
